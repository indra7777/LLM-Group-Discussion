import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  Copy, 
  Download, 
  ExternalLink, 
  FileText, 
  Target,
  MessageSquare,
  HelpCircle,
  ArrowLeft,
  Check,
  Loader,
  Lightbulb,
  BarChart3
} from 'lucide-react';
import toast from 'react-hot-toast';

const BriefingScreen = ({ sessionData, messages, onGetSummary, onStartNew }) => {
  const [summary, setSummary] = useState(null);
  const [isLoadingSummary, setIsLoadingSummary] = useState(true);
  const [activeTab, setActiveTab] = useState('overview');
  const [copiedSections, setCopiedSections] = useState(new Set());

  // Load summary on mount
  useEffect(() => {
    loadSummary();
  }, []);

  const loadSummary = async () => {
    setIsLoadingSummary(true);
    try {
      const summaryText = await onGetSummary();
      setSummary(summaryText);
    } catch (error) {
      console.error('Failed to load summary:', error);
      toast.error('Failed to generate summary');
    } finally {
      setIsLoadingSummary(false);
    }
  };

  // Parse messages into structured data
  const parseDiscussionData = () => {
    const agentMessages = messages.filter(m => m.type === 'agent');
    const humanMessages = messages.filter(m => m.type === 'human');
    
    const agentContributions = {
      'Dr. Data': [],
      'Dr. Synthesis': [],
      'Dr. Skeptic': [],
      'Dr. Discovery': []
    };
    
    agentMessages.forEach(message => {
      if (agentContributions[message.speaker]) {
        agentContributions[message.speaker].push(message.content);
      }
    });

    return {
      agentContributions,
      humanMessages,
      totalMessages: messages.length,
      topic: sessionData?.topic || 'Discussion Topic'
    };
  };

  const discussionData = parseDiscussionData();

  // Generate different content sections from the discussion
  const generateScriptOutline = () => {
    const synthesizerIdeas = discussionData.agentContributions['Dr. Synthesis'] || [];
    if (synthesizerIdeas.length === 0) return "No script outline available yet.";
    
    return synthesizerIdeas.join('\n\n');
  };

  const generateKeyFacts = () => {
    const dataPoints = discussionData.agentContributions['Dr. Data'] || [];
    if (dataPoints.length === 0) return "No key facts available yet.";
    
    // Extract key facts and format as bullets
    const facts = dataPoints.flatMap(content => {
      // Simple heuristic to extract factual statements
      const sentences = content.split(/[.!?]+/).filter(s => s.trim().length > 10);
      return sentences.slice(0, 3); // Take first 3 sentences from each contribution
    });
    
    return facts.map(fact => `• ${fact.trim()}`).join('\n');
  };

  const generateCounterarguments = () => {
    const skepticalViews = discussionData.agentContributions['Dr. Skeptic'] || [];
    if (skepticalViews.length === 0) return "No counterarguments identified yet.";
    
    return skepticalViews.join('\n\n');
  };

  const generateCreativeAngles = () => {
    const creativeIdeas = discussionData.agentContributions['Dr. Discovery'] || [];
    if (creativeIdeas.length === 0) return "No creative angles explored yet.";
    
    return creativeIdeas.join('\n\n');
  };

  // Generate catchy titles from the discussion
  const generateTitles = () => {
    const topic = discussionData.topic;
    const keyWords = topic.split(' ').filter(word => word.length > 3);
    
    return [
      `The Surprising Truth About ${keyWords.join(' ')}`,
      `Why Everyone Is Wrong About ${topic}`,
      `${topic}: The Complete Guide`,
      `5 Things You Need to Know About ${topic}`,
      `The Future of ${keyWords[0]} Will Shock You`
    ];
  };

  const handleCopy = async (text, sectionId) => {
    try {
      await navigator.clipboard.writeText(text);
      setCopiedSections(prev => new Set(prev).add(sectionId));
      toast.success('Copied to clipboard!');
      
      // Remove the "copied" state after 2 seconds
      setTimeout(() => {
        setCopiedSections(prev => {
          const newSet = new Set(prev);
          newSet.delete(sectionId);
          return newSet;
        });
      }, 2000);
    } catch (error) {
      toast.error('Failed to copy to clipboard');
    }
  };

  const handleExportAll = () => {
    const allContent = `
# Discussion Briefing: ${discussionData.topic}

## Summary
${summary || 'Loading...'}

## Script Outline
${generateScriptOutline()}

## Key Facts & Data
${generateKeyFacts()}

## Creative Angles
${generateCreativeAngles()}

## Potential Counterarguments
${generateCounterarguments()}

## Suggested Titles
${generateTitles().map(title => `• ${title}`).join('\n')}

---
Generated by LLM Group Discussion
Total messages: ${discussionData.totalMessages}
    `.trim();

    const blob = new Blob([allContent], { type: 'text/markdown' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `discussion-briefing-${Date.now()}.md`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    toast.success('Briefing exported!');
  };

  const tabs = [
    { id: 'overview', label: 'Overview', icon: FileText },
    { id: 'outline', label: 'Script Outline', icon: Target },
    { id: 'facts', label: 'Key Facts', icon: BarChart3 },
    { id: 'angles', label: 'Creative Angles', icon: Lightbulb },
    { id: 'qa', label: 'Q&A Prep', icon: HelpCircle }
  ];

  const CopyButton = ({ text, sectionId, className = "" }) => {
    const isCopied = copiedSections.has(sectionId);
    
    return (
      <button
        onClick={() => handleCopy(text, sectionId)}
        className={`btn btn-ghost btn-small ${className}`}
        title="Copy to clipboard"
      >
        {isCopied ? (
          <Check className="w-4 h-4 text-green-600" />
        ) : (
          <Copy className="w-4 h-4" />
        )}
        {isCopied ? 'Copied!' : 'Copy'}
      </button>
    );
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <motion.div
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        className="bg-white border-b border-gray-200 p-4 sticky top-0 z-10"
      >
        <div className="container">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="heading-2 text-gray-900">Your Briefing</h1>
              <p className="text-gray-600 truncate max-w-2xl">
                {discussionData.topic}
              </p>
            </div>
            
            <div className="flex items-center space-x-3">
              <button
                onClick={handleExportAll}
                className="btn btn-secondary"
              >
                <Download className="w-4 h-4" />
                Export All
              </button>
              <button
                onClick={onStartNew}
                className="btn btn-primary"
              >
                <ArrowLeft className="w-4 h-4" />
                Start New
              </button>
            </div>
          </div>
        </div>
      </motion.div>

      <div className="container py-6">
        <div className="max-w-6xl mx-auto">
          
          {/* Hero Summary Card */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className="card p-8 mb-8"
          >
            <div className="text-center mb-6">
              <h2 className="heading-2 text-gray-900 mb-4">Executive Summary</h2>
              {isLoadingSummary ? (
                <div className="flex items-center justify-center py-8">
                  <Loader className="w-6 h-6 animate-spin text-blue-500 mr-3" />
                  <span className="text-gray-600">Generating your summary...</span>
                </div>
              ) : (
                <div className="max-w-3xl mx-auto">
                  <p className="body-large text-gray-700 leading-relaxed whitespace-pre-wrap">
                    {summary}
                  </p>
                  <div className="flex justify-center mt-4">
                    <CopyButton text={summary || ''} sectionId="summary" />
                  </div>
                </div>
              )}
            </div>
          </motion.div>

          {/* Tab Navigation */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.2 }}
            className="mb-6"
          >
            <div className="flex space-x-1 bg-white rounded-lg p-1 shadow-sm border">
              {tabs.map((tab) => {
                const IconComponent = tab.icon;
                return (
                  <button
                    key={tab.id}
                    onClick={() => setActiveTab(tab.id)}
                    className={`flex items-center px-4 py-2 rounded-md text-sm font-medium transition-all ${
                      activeTab === tab.id
                        ? 'bg-blue-100 text-blue-700'
                        : 'text-gray-600 hover:text-gray-900 hover:bg-gray-50'
                    }`}
                  >
                    <IconComponent className="w-4 h-4 mr-2" />
                    {tab.label}
                  </button>
                );
              })}
            </div>
          </motion.div>

          {/* Tab Content */}
          <AnimatePresence mode="wait">
            <motion.div
              key={activeTab}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
              transition={{ duration: 0.3 }}
              className="grid lg:grid-cols-3 gap-6"
            >
              
              {activeTab === 'overview' && (
                <>
                  <div className="lg:col-span-2">
                    <div className="card p-6">
                      <h3 className="heading-3 text-gray-900 mb-4">Discussion Statistics</h3>
                      <div className="grid md:grid-cols-2 gap-4">
                        <div className="bg-blue-50 p-4 rounded-lg">
                          <div className="text-2xl font-bold text-blue-600">{discussionData.totalMessages}</div>
                          <div className="text-blue-800">Total Messages</div>
                        </div>
                        <div className="bg-green-50 p-4 rounded-lg">
                          <div className="text-2xl font-bold text-green-600">4</div>
                          <div className="text-green-800">AI Perspectives</div>
                        </div>
                      </div>
                    </div>
                  </div>
                  
                  <div>
                    <div className="card p-6">
                      <h3 className="heading-3 text-gray-900 mb-4">Quick Actions</h3>
                      <div className="space-y-3">
                        <button
                          onClick={() => handleCopy(generateTitles().join('\n'), 'titles')}
                          className="w-full btn btn-ghost text-left"
                        >
                          <FileText className="w-4 h-4" />
                          Copy Title Ideas
                        </button>
                        <button
                          onClick={() => handleCopy(generateKeyFacts(), 'facts-quick')}
                          className="w-full btn btn-ghost text-left"
                        >
                          <BarChart3 className="w-4 h-4" />
                          Copy Key Facts
                        </button>
                        <button
                          onClick={handleExportAll}
                          className="w-full btn btn-primary text-left"
                        >
                          <Download className="w-4 h-4" />
                          Export Everything
                        </button>
                      </div>
                    </div>
                  </div>
                </>
              )}

              {activeTab === 'outline' && (
                <div className="lg:col-span-3">
                  <div className="card p-6">
                    <div className="flex justify-between items-center mb-6">
                      <h3 className="heading-3 text-gray-900">Script Outline</h3>
                      <CopyButton text={generateScriptOutline()} sectionId="outline" />
                    </div>
                    <div className="prose max-w-none">
                      <pre className="whitespace-pre-wrap text-gray-700 bg-gray-50 p-4 rounded-lg">
                        {generateScriptOutline()}
                      </pre>
                    </div>
                  </div>
                </div>
              )}

              {activeTab === 'facts' && (
                <div className="lg:col-span-3">
                  <div className="card p-6">
                    <div className="flex justify-between items-center mb-6">
                      <h3 className="heading-3 text-gray-900">Key Facts & Data</h3>
                      <CopyButton text={generateKeyFacts()} sectionId="facts" />
                    </div>
                    <div className="prose max-w-none">
                      <pre className="whitespace-pre-wrap text-gray-700 bg-gray-50 p-4 rounded-lg">
                        {generateKeyFacts()}
                      </pre>
                    </div>
                  </div>
                </div>
              )}

              {activeTab === 'angles' && (
                <div className="lg:col-span-3">
                  <div className="card p-6">
                    <div className="flex justify-between items-center mb-6">
                      <h3 className="heading-3 text-gray-900">Creative Angles</h3>
                      <CopyButton text={generateCreativeAngles()} sectionId="angles" />
                    </div>
                    <div className="prose max-w-none">
                      <pre className="whitespace-pre-wrap text-gray-700 bg-gray-50 p-4 rounded-lg">
                        {generateCreativeAngles()}
                      </pre>
                    </div>
                  </div>
                </div>
              )}

              {activeTab === 'qa' && (
                <>
                  <div className="lg:col-span-2">
                    <div className="card p-6">
                      <div className="flex justify-between items-center mb-6">
                        <h3 className="heading-3 text-gray-900">Potential Counterarguments</h3>
                        <CopyButton text={generateCounterarguments()} sectionId="counter" />
                      </div>
                      <div className="prose max-w-none">
                        <pre className="whitespace-pre-wrap text-gray-700 bg-gray-50 p-4 rounded-lg">
                          {generateCounterarguments()}
                        </pre>
                      </div>
                    </div>
                  </div>
                  
                  <div>
                    <div className="card p-6">
                      <div className="flex justify-between items-center mb-6">
                        <h3 className="heading-3 text-gray-900">Title Ideas</h3>
                        <CopyButton text={generateTitles().join('\n')} sectionId="titles-full" />
                      </div>
                      <ul className="space-y-2">
                        {generateTitles().map((title, index) => (
                          <li key={index} className="text-gray-700 flex items-start">
                            <span className="text-blue-500 mr-2">•</span>
                            {title}
                          </li>
                        ))}
                      </ul>
                    </div>
                  </div>
                </>
              )}
            </motion.div>
          </AnimatePresence>
        </div>
      </div>
    </div>
  );
};

export default BriefingScreen;